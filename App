let script;
let gapi;
let initClient;
let GoogleAuth;

function setSigninStatus() {

}

script = <script>
    var GoogleAuth;
    var SCOPE = 'https://www.googleapis.com/auth/drive.metadata.readonly';
    function handleClientLoad() {

    gapi.load('client:auth2', initClient)};
    }

    function initClient() {
    var discoveryUrl = 'https://localhost8000';

    gapi.client.init({
    'apiKey': 'YOUR_API_KEY',
    'clientId': 'YOUR_CLIENT_ID',
    'discoveryDocs': [discoveryUrl],
    'scope': SCOPE
}).then(function () {
    GoogleAuth = gapi.auth2.getAuthInstance();

    GoogleAuth.isSignedIn.listen(updateSigninStatus);

    var user = GoogleAuth.currentUser.get();
    setSigninStatus();


    $('#sign-in-or-out-button').click(function() {
    handleAuthClick();
});
    $('#revoke-access-button').click(function() {
    revokeAccess();
});
});
}

    function handleAuthClick() {
    if (GoogleAuth.isSignedIn.get()) {
    GoogleAuth.signOut();
} else {
    GoogleAuth.signIn();
}
}


    function revokeAccess() {
    GoogleAuth.disconnect();
}

    function setSigninStatus() {
    var user = GoogleAuth.currentUser.get();
    var isAuthorized = user.hasGrantedScopes(SCOPE);
    if (isAuthorized) {
    $('#sign-in-or-out-button').html('Sign out');
    $('#revoke-access-button').css('display', 'inline-block');
    $('#auth-status').html('You are currently signed in and have granted ' +
    'access to this app.');
} else {
    $('#sign-in-or-out-button').html('Sign In/Authorize');
    $('#revoke-access-button').css('display', 'none');
    $('#auth-status').html('You have not authorized this app or you are ' +
    'signed out.');
}
}

    function updateSigninStatus() {
    setSigninStatus()};
}
</script>;

<button id="sign-in-or-out-button"
        style="margin-left: 25px">Sign In/Authorize</button>
<button id="revoke-access-button"
        style="display: none; margin-left: 25px">Revoke access</button>

<div id="auth-status" style="display: inline; padding-left: 25px"/>
let hr;
hr = <hr>

    <script src={"https://localhost8000"}/>
    <script async defer
            onLoad="this.onload=function(){};handleClientLoad()"
            onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    ;
